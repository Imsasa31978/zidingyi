{
  "name": "vmess or vles",
  "description": "vmess or vles",
  "keywords": [
    "vmess or vles"
  ],
  "env": {
    "PROTOCOL": {
      "description": "要部署的协议vmess或vless,请填小写的vmess或vless",
      "value": "vmess",
      "required": true
    },
    "UUID": {
      "description": "UUID充当配置的路径和账号密码,请妥善保存,可生成UUID的网站: https://www.uuidgenerator.net",
      "value": "",
      "required": false
    },
        "vindex": {
      "description": "伪装网站，填写一个真实网站地址",
      "value": "",
      "required": false
    }
   
  },
  "website": "https://github.com/louyour/nginx-Manual",
  "repository": "https://github.com/louyour/nginx-Manual",
  "stack": "container",
  "features": [
    "runtime-dyno-metadata"
  ]
}

#!/bin/sh
# V2Ray generate configuration
# Download and install V2Ray
config_path=$PROTOCOL"_ws_tls.json"
mkdir /tmp/v2ray
curl -L -H "Cache-Control: no-cache" -o /tmp/v2ray/v2ray.zip https://github.com/v2fly/v2ray-core/releases/latest/download/v2ray-linux-64.zip
unzip /tmp/v2ray/v2ray.zip -d /tmp/v2ray
install -m 755 /tmp/v2ray/v2ray /usr/local/bin/v2ray
install -m 755 /tmp/v2ray/v2ctl /usr/local/bin/v2ctl
# Remove temporary directory
rm -rf /tmp/v2ray
# V2Ray new configuration
install -d /usr/local/etc/v2ray
envsubst '\$UUID,\$WS_PATH,\$PROTOCOL' < $config_path > /usr/local/etc/v2ray/config.json
# MK TEST FILES
mkdir /opt/test
cd /opt/test
dd if=/dev/zero of=100mb.bin bs=100M count=1
dd if=/dev/zero of=10mb.bin bs=10M count=1
# Run V2Ray
/usr/local/bin/v2ray -config /usr/local/etc/v2ray/config.json &
# Run nginx
/bin/bash -c "envsubst '\$UUID,\$PORT,\$PROTOCOL,\$vindex' < /etc/nginx/conf.d/default.conf.template > /etc/nginx/conf.d/default.conf" && nginx -g 'daemon off;'

FROM nginx:1.19.3-alpine
ENV TZ=Asia/Shanghai
RUN apk add --no-cache --virtual .build-deps ca-certificates bash curl unzip php7
COPY nginx/default.conf.template /etc/nginx/conf.d/default.conf.template
COPY nginx/nginx.conf /etc/nginx/nginx.conf
#COPY nginx/static-html /usr/share/nginx/html/index
COPY nginx/h5-speedtest /usr/share/nginx/html/speedtest
COPY configure.sh /configure.sh
COPY v2ray_config /
RUN chmod +x /configure.sh

ENTRYPOINT ["sh", "/configure.sh"]


build:
  docker:
    web: Dockerfile
### 提醒：滥用可能导致账户被删除！！！ 

将本项目fork或者上传至自己仓库修改`Deploy to Heroku`按键指向地址为自己仓库地址

[![](https://www.herokucdn.com/deploy/button.png)](https://heroku.com/deploy?template=https://github.com/louyour/nginx-Manual.git)

### heroku上部署v2ray

本项目只支持部署vless+ws+tls 或 vmess+ws+tls单协议节点，支持跳转伪装网页，可自定义伪装网站地址。

path路径自动设置为：/自定义UUID码-vless 或 /自定义UUID码-vmess


### 代理协议：vless+ws+tls 或 vmess+ws+tls
* 服务器地址：自选ip（如：icook.tw）或者：应用程序名.herokuapp.com
* 端口：443
* 默认UUID：自定义UUID码 
* 加密：none
* 传输协议：ws
* 伪装类型：none
* 伪装host：****.workers.dev(CF Workers反代地址)或者：应用程序名.herokuapp.com
* SNI地址：****.workers.dev(CF Workers反代地址)或者：应用程序名.herokuapp.com
* path路径：/自定义UUID码-vless 或 /自定义UUID码-vmess    (注意：前有斜杠/)
* vmess额外id（alterid）：0
* 底层传输安全：tls
* 跳过证书验证：false

### CloudFlare Workers反代代码
```js
addEventListener(
    "fetch",event => {
        let url=new URL(event.request.url);
        url.hostname="appname.herokuapp.com";
        let request=new Request(url,event.request);
        event. respondWith(
            fetch(request)
        )
    }
)
```
<summary>CloudFlare Workers单双日轮换反代代码</summary>

```js
const SingleDay = 'app0.herokuapp.com'
const DoubleDay = 'app1.herokuapp.com'
addEventListener(
    "fetch",event => {
    
        let nd = new Date();
        if (nd.getDate()%2) {
            host = SingleDay
        } else {
            host = DoubleDay
        }
        
        let url=new URL(event.request.url);
        url.hostname=host;
        let request=new Request(url,event.request);
        event. respondWith(
            fetch(request)
        )
    }
)
```
</details>
